Good morning! Here's your coding interview problem for today.

This problem was asked by Google.

An XOR linked list is a more memory efficient doubly linked list. 
Instead of each node holding next and prev fields, it holds a field named both, 
which is an XOR of the next node and the previous node. 
Implement an XOR linked list; it has an add(element) which adds the element to the end, 
and a get(index) which returns the node at index.

If using a language that has no pointers (such as Python), 
you can assume you have access to get_pointer and dereference_pointer functions 
that converts between nodes and memory addresses.

**Doubly Linked List (DLL)
[HEAD] <--> [NODE 1] <--> [NODE 2] <--> [NODE 3] <--> [TAIL]
struct Node {
    int data;
    Node* prev;  // 이전 노드를 가리키는 포인터
    Node* next;  // 다음 노드를 가리키는 포인터
};


**XOR Linked list 
prev pointer + next pointer -> both 
[HEAD] <-> [NODE 1] <-> [NODE 2] <-> [NODE 3] <-> [TAIL]
struct Node {
    int data;
    Node* both;  // prev XOR next (이전 노드와 다음 노드의 XOR 값)
};

**key idea
next = prev ^ current->both;

current node address, prev node address -> next node address 